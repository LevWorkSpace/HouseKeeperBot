public without sharing class TelegramNewMemberListener implements TelegramBotUpdateListener {

    public static final String MESSAGE_STARTS = '–í—ñ—Ç–∞—é, ';
    private static final String MESSAGE_ENDS = '! –ù–∞–ø–∏—à—ñ—Ç—å –∑ —è–∫–æ—ó –≤–∏ –∫–≤–∞—Ä—Ç–∏—Ä–∏, –±—É–¥—å-–ª–∞—Å–∫–∞!';
    private static final String BOT_MESSAGE = '-ü§ñ, –ø—Ä–∏–≤—ñ—Ç. –ù–∞–≥–∞–¥—É—é –Ω–∞—à—ñ –ø—Ä–∞–≤–∏–ª–∞ —Ç—É—Ç:'
            + '\n1.–†–æ–±–æ—Ç –Ω–µ –º–æ–∂–µ –∑–∞–ø–æ–¥—ñ—è—Ç–∏ —à–∫–æ–¥—É –ª—é–¥–∏–Ω—ñ, –∞–±–æ —Å–≤–æ—î—é –±–µ–∑–¥—ñ—è–ª—å–Ω—ñ—Å—Ç—é –¥–æ–∑–≤–æ–ª–∏—Ç–∏, —â–æ–± –ª—é–¥–∏–Ω—ñ –±—É–ª–∞ –∑–∞–ø–æ–¥—ñ—è–Ω–∞ —à–∫–æ–¥–∞;'
            + '\n2.–†–æ–±–æ—Ç –ø–æ–≤–∏–Ω–µ–Ω –ø—ñ–¥–∫–æ—Ä—è—Ç–∏—Å—è –Ω–∞–∫–∞–∑–∞–º –ª—é–¥–∏–Ω–∏, –∑–∞ –≤–∏–Ω—è—Ç–∫–æ–º —Ç–∞–∫–∏—Ö, —â–æ —Å—É–ø–µ—Ä–µ—á–∞—Ç—å –ø–µ—Ä—à–æ–º—É –ø—É–Ω–∫—Ç—É;'
            + '\n3.–†–æ–±–æ—Ç –ø–æ–≤–∏–Ω–µ–Ω –∑–∞—Ö–∏—â–∞—Ç–∏ —Å–∞–º–æ–≥–æ —Å–µ–±–µ, —è–∫—â–æ —Ç—ñ–ª—å–∫–∏ –π–æ–≥–æ –¥—ñ—ó –Ω–µ —Å—É–ø–µ—Ä–µ—á–∞—Ç—å –ø–µ—Ä—à–æ–º—É —ñ –¥—Ä—É–≥–æ–º—É –ø—É–Ω–∫—Ç–∞–º.';

    public Boolean isApplicable(TelegramBotUpdateDTO tUpdate) {
        return tUpdate.message != null && tUpdate.message.new_chat_members != null;
    }

    public void dispatch(TelegramBotUpdateDTO tUpdate) {
        TelegramBotUpdateDTO.TG_Message message = tUpdate.message;
        try {
            List<Participant__c> idParticipants = new List<Participant__c>();
            List<Participant__c> usernameParticipants = new List<Participant__c>();
            for (TelegramBotUpdateDTO.TG_User newUser : message.new_chat_members) {
                if (!newUser.is_bot) {
                    Participant__c participant = TelegramBotService.buildParticipant(newUser);
                    if (participant.TelegramUsername__c == null) {
                        idParticipants.add(participant);
                    } else {
                        usernameParticipants.add(participant);
                    }

                    String text = MESSAGE_STARTS + TelegramBotService.mention(newUser) + MESSAGE_ENDS;
                    System.enqueueJob(new TelegramQueueable(
                            TelegramBotApi.API_COMMAND.sendMessage,
                            new TelegramBotService.MessageBuilder(message.chat.id)
                                    .setText(text)
                                    .setReplyToId(message.message_id)
                                    .setReplyMarkup(JSON.serialize(new TelegramBotApi.ForceReply(true, true)))
                                    .disableNotifications()
                                    .getMessage()
                    ));
                } else {
                    System.enqueueJob(new TelegramQueueable(
                            TelegramBotApi.API_COMMAND.sendMessage,
                            new TelegramBotService.MessageBuilder(message.chat.id)
                                    .setText(TelegramBotService.mention(newUser) + BOT_MESSAGE)
                                    .setReplyToId(message.message_id)
                                    .disableNotifications()
                                    .getMessage()
                    ));
                }
            }
            upsert idParticipants Participant__c.TelegramId__c;
            upsert usernameParticipants Participant__c.TelegramUsername__c;
        } catch (Exception e) {
            Logger.error(e, message, 'TelegramNewMemberListener.dispatch');
        }
    }
}